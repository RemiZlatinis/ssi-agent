name: Release Packages
on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Package version (optional)'
        required: false
        default: 'dev'

env:
  PACKAGE_NAME: ssi-agent
  PACKAGE_DESCRIPTION: "The agent of the Service Status Indicator monitoring framework"

jobs:
  build-deb:
    name: Build DEB Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Debian packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential dpkg-dev debhelper devscripts

      - name: Install fmp dependencies
        run: |
          sudo apt-get install -y ruby ruby-dev

      - name: Install fpm
        run: sudo gem install fpm

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest

      - name: Install Python deps (dev)
        run: |
          poetry config virtualenvs.create false --local   # install into runner python
          poetry install --no-interaction --no-ansi

      - name: Build wheel and sdist
        run: |
          poetry build -f wheel -f sdist

      - name: Create systemd service file
        run: |
          mkdir -p systemd
          cp src/templates/agent.service systemd/${PACKAGE_NAME}.service
          sed -i 's|ExecStart=/opt/ssi-agent/venv/bin/ssi-agent-daemon|ExecStart=/usr/bin/ssi-agent-daemon|' systemd/${PACKAGE_NAME}.service

      - name: Create default config
        run: |
          mkdir -p config
          cat > config/config.json << EOF
          {
              "websocket_uri": "ws://localhost:5000",
              "log_level": "INFO",
              "log_dir": "/var/log/ssi-agent",
              "config_dir": "/etc/ssi-agent"
          }
          EOF

      - name: Build DEB package with fpm
        run: |
          VERSION=${{ github.event.release.tag_name || github.event.inputs.version || 'dev' }}
          VERSION=${VERSION#v}  # Remove 'v' prefix if present

          fpm -s python -t deb \
              --name ${PACKAGE_NAME} \
              --version ${VERSION} \
              --iteration ${GITHUB_RUN_NUMBER} \
              --description "${PACKAGE_DESCRIPTION}" \
              --maintainer "Remi Zlatinis <remizlatinis@gmail.com>" \
              --url "https://github.com/${GITHUB_REPOSITORY}" \
              --license "MIT" \
              --python-bin python3 \
              --python-pip pip3 \
              --python-package-name-prefix python3 \
              --depends python3 \
              --depends python3-venv \
              --depends systemd \
              --deb-systemd systemd/${PACKAGE_NAME}.service \
              --config-files /etc/${PACKAGE_NAME}/config.json \
              --directories /var/log/${PACKAGE_NAME} \
              --deb-systemd-auto-start \
              --deb-systemd-enable \
              --before-install scripts/preinst \
              --after-install scripts/postinst \
              --before-remove scripts/prerm \
              --after-remove scripts/postrm \
              .

      - name: Upload DEB package
        uses: actions/upload-artifact@v4
        with:
          name: deb-package
          path: "*.deb"

  # build-rpm:
  #   name: Build RPM Package
  #   runs-on: ubuntu-latest
  #   container:
  #     image: fedora:latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Python 3.12
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.12"

  #     - name: Install build dependencies
  #       run: |
  #         dnf install -y ruby ruby-devel gcc make rpm-build

  #     - name: Install fpm
  #       run: gem install fpm

  #     - name: Install Poetry
  #       uses: snok/install-poetry@v1
  #       with:
  #         version: latest

  #     - name: Install Python dependencies
  #       run: |
  #         poetry install

  #     - name: Create setup.py
  #       run: |
  #         poetry build

  #     - name: Create systemd service file
  #       run: |
  #         mkdir -p systemd
  #         cp src/templates/agent.service systemd/${PACKAGE_NAME}.service
  #         sed -i 's|ExecStart=/opt/ssi-agent/venv/bin/ssi-agent-daemon|ExecStart=/usr/bin/ssi-agent-daemon|' systemd/${PACKAGE_NAME}.service

  #     - name: Create default config
  #       run: |
  #         mkdir -p config
  #         cat > config/config.json << EOF
  #         {
  #             "websocket_uri": "ws://localhost:5000",
  #             "log_level": "INFO",
  #             "log_dir": "/var/log/ssi-agent",
  #             "config_dir": "/etc/ssi-agent"
  #         }
  #         EOF

  #     - name: Build RPM package with fpm
  #       run: |
  #         VERSION=${{ github.event.release.tag_name || github.event.inputs.version || 'dev' }}
  #         VERSION=${VERSION#v}  # Remove 'v' prefix if present

  #         fpm -s python -t rpm \
  #             --name ${PACKAGE_NAME} \
  #             --version ${VERSION} \
  #             --iteration ${GITHUB_RUN_NUMBER} \
  #             --description "${PACKAGE_DESCRIPTION}" \
  #             --maintainer "Remi Zlatinis <remizlatinis@gmail.com>" \
  #             --url "https://github.com/${GITHUB_REPOSITORY}" \
  #             --license "MIT" \
  #             --python-bin python3 \
  #             --python-pip pip3 \
  #             --python-package-name-prefix python3 \
  #             --depends python3 \
  #             --depends systemd \
  #             --rpm-systemd systemd/${PACKAGE_NAME}.service \
  #             --config-files /etc/${PACKAGE_NAME}/config.json \
  #             --directories /var/log/${PACKAGE_NAME} \
  #             --rpm-auto-start \
  #             --rpm-auto-enable \
  #             --before-install scripts/preinst \
  #             --after-install scripts/postinst \
  #             --before-remove scripts/prerm \
  #             --after-remove scripts/postrm \
  #             .

  #     - name: Upload RPM package
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: rpm-package
  #         path: "*.rpm"

  create-aur-package:
    name: Create AUR Package
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm git python python-pip base-devel

      - name: Create PKGBUILD
        run: |
          VERSION=${{ github.event.release.tag_name || github.event.inputs.version || 'dev' }}
          VERSION=${VERSION#v}

          cat > PKGBUILD << EOF
          pkgname=${PACKAGE_NAME}
          pkgver=${VERSION}
          pkgrel=1
          pkgdesc="${PACKAGE_DESCRIPTION}"
          arch=('any')
          url="https://github.com/${GITHUB_REPOSITORY}"
          license=('MIT')
          depends('python' 'python-websockets' 'python-watchdog' 'python-click' 'python-pydantic' 'python-requests' 'systemd')
          makedepends('python-setuptools')
          source=("\${pkgname}::git+https://github.com/${GITHUB_REPOSITORY}.git#tag=v\${pkgver}")
          sha256sums('SKIP')

          build() {
              cd "\${pkgname}"
              python setup.py build
          }

          package() {
              cd "\${pkgname}"
              python setup.py install --root="\$pkgdir" --optimize=1 --skip-build

              # Install systemd service
              install -Dm644 src/templates/agent.service "\${pkgdir}/usr/lib/systemd/system/${PACKAGE_NAME}.service"

              # Install default config
              install -Dm644 /dev/stdin "\${pkgdir}/etc/${PACKAGE_NAME}/config.json" << 'CONFIG_EOF'
          {
              "websocket_uri": "ws://localhost:5000",
              "log_level": "INFO",
              "log_dir": "/var/log/ssi-agent",
              "config_dir": "/etc/ssi-agent"
          }
          CONFIG_EOF

              # Create log directory
              install -dm755 "\${pkgdir}/var/log/${PACKAGE_NAME}"
          }
          EOF

      - name: Upload AUR files
        uses: actions/upload-artifact@v4
        with:
          name: aur-package
          path: |
            PKGBUILD
            *.install
